TITLE:: MGU_AbstractModule
summary:: Abstract class for all MGU modules
categories:: Libraries/MGU
related:: MGU_AbstractBufferModule, MGU_AbstractFilterModule, MGU_AbstractWavetableModule

DESCRIPTION::
Main class for MGU module implementation. All MGU_module classes should inherit from this.

CLASSMETHODS::

METHOD:: new
(describe method here)

ARGUMENT:: out
(describe argument here)

ARGUMENT:: server
(describe argument here)

ARGUMENT:: numChannels
(describe argument here)

ARGUMENT:: name
(describe argument here)

returns:: (describe returnvalue here)


INSTANCEMETHODS::

private:: nodeArray, nodeGroup, thisInstance, init

METHOD:: container
See MGU_container for more information. Users should not have to directly access/modify this attribute.

METHOD:: registerToMinuit
registers the module for Minuit communication

ARGUMENT:: minuitInterface
a MGU_minuitInterface

METHOD:: killSynths
kill all synths related to this module on the server

METHOD:: availablePresets
(describe method here)

returns:: (describe returnvalue here)

METHOD:: saveState
saves the module state

ARGUMENT:: fileName
(describe argument here)

METHOD:: recallState
recalls a previously saved state

ARGUMENT:: fileName
String containing preset name

ARGUMENT:: interp
parameter interpolation from current state (not yet implemented)

METHOD:: out
Module's outbut bus, users should not have to use & access this: see the .connectToModule method instead

METHOD:: inbus
(describe method here)

returns:: (describe returnvalue here)

METHOD:: connectToModule
(describe method here)

ARGUMENT:: module
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: sendSynth
(describe method here)

returns:: (describe returnvalue here)

METHOD:: server
(describe method here)

returns:: (describe returnvalue here)

METHOD:: numChannels
gets/sets the number of channels for the module's output. Note: only works for modules supporting Multichannel expansion (see MGU module reference)

returns:: anInteger

METHOD:: name
(describe method here)

returns:: (describe returnvalue here)

METHOD:: def
(describe method here)

returns:: (describe returnvalue here)


EXAMPLES::

code::
(some example code)
::